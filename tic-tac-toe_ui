#!C:\Python27
#this code is based on Python 2.7.5
#importing TK interface to use Tk widgets
from Tkinter import *
import random

# use a class definition to hold all my functions
class TicApp(Tk):
    def __init__(tic):
        """ initialize the frame and widgets"""
        #load Tk
        Tk.__init__(tic)

        #make a frame
        tic_fr = Frame(tic)

        #intializing the buttons and the label
        tic.player_button = Button(tic, text="User",
                                    command=lambda: tic.do_start(TRUE),
                                    font=("Courier", 16))
        tic.computer_button = Button(tic, text="Computer",
                                      command=lambda: tic.do_start(FALSE),
                                      font=("Courier", 16))
        tic.exit_button = Button(tic, text="Exit", command=tic.do_exit,
                                  font=("Courier", 16))
        tic.again_button = Button(tic, text="Try Again", command=tic.do_again,
                                   state=DISABLED,
                                   font=("Courier", 16))
        tic.top_label = Label(tic, text="Please select who starts", font=("Courier", 16))

        #initializing a list to be used for field buttons 
        tic.button_list = [0,1,2,3,4,5,6,7,8,9]

        #loop to build buttons for playing tic-tac-toe
        for i in range(1,10):
            tic.button_list[i] = Button(tic, text="-----",  
                                   command=lambda j=i: tic.do_button(j),
                                   state=DISABLED, relief=RAISED, height=4,
                                   width=8, font=("Courier", 28))

        #setting buttos in frame 
        tic_fr.grid()
        tic.top_label.grid(row=0, columnspan=4)
        tic.player_button.grid(row=1, column=0)
        tic.computer_button.grid(row=1, column=2)
        tic.exit_button.grid(row=5, column=0)
        tic.again_button.grid(row=5, column=2)

        #button number, row, column
        myL = [[1,4,0], [2,4,1], [3,4,2],  
               [4,3,0], [5,3,1], [6,3,2],
               [7,2,0], [8,2,1], [9,2,2]]
        for i in myL:
            tic.button_list[i[0]].grid(row=i[1], column=i[2])

    def do_again(tic):
        #reset buttons and change the label
        tic.player_button.config(state=NORMAL)
        tic.computer_button.config(state=NORMAL)
        tic.top_label.config(text="Who starts?")

        #disable the field buttons
        for i in range(1,10):
            tic.button_list[i].config(text="-----", state=DISABLED)

    def do_start(tic,player):
        #turn buttons off
        tic.player_button.config(state=DISABLED)
        tic.computer_button.config(state=DISABLED)
        tic.again_button.config(state=DISABLED)

        #reset the bState and mySums lists and the flags
        tic.bState = [10,0,0,0,0,0,0,0,0,0]  
        tic.mySums = [0,0,0,0,0,0,0,0]       
        tic.gameDone = FALSE
        tic.specialDefense = FALSE

        #turn the field buttons on
        for i in range(1,10):
            tic.button_list[i].config(state=NORMAL)

         #if player is true the player starts otherwise the computer starts
        tic.top_label.config(text="X belongs to you, make a move")
        if player:
            tic.turn = FALSE
        else:
            tic.turn = TRUE
            tic.do_move()

    def do_button(tic, i):
        #i is the number of the button that was pushed note: 1 through 9
        # if turn is true the computer made a move otherwie player
        if tic.turn:
            myText = "-0-"
            tic.turn = FALSE
            tic.bState[i] = -1
        else:
            myText = "-X-"
            tic.turn = TRUE
            tic.bState[i] = 1

        tic.button_list[i].config(text=myText, state=DISABLED)
        tic.test_done()

        # if it is the computer's turn and the game is not over make a move
        if (tic.turn) and (not tic.gameDone):
            tic.do_move()

    def test_done(tic):
        """test if the game is over"""
        #if there is not a 0 in bstate the game is done
        if not (0 in tic.bState):
            tic.top_label.config(text="Draw, game over!")
            tic.gameDone = TRUE
            tic.again_button.config(state=NORMAL)

        #after doing sums look for 3 or -3 to find if there was a winner
        tic.do_sums()
        if 3 in tic.mySums: #note 3 in mySums means player has won
            tic.top_label.config(text="You won!")
            tic.gameDone = TRUE
            tic.again_button.config(state=NORMAL)
        elif -3 in tic.mySums: #note -3 in mySums means computer has won
            tic.top_label.config(text="Computer won!")
            tic.gameDone = TRUE
            tic.again_button.config(state=NORMAL)

    def do_sums(tic):
        """put a list of the various row, column, and diagonal sums in mySums"""
        triples = [[1,2,3], [4,5,6], [7,8,9], #rows
                   [1,4,7], [2,5,8], [3,6,9], #columns
                   [1,5,9], [3,5,7]]          #diagonals
        count = 0
        for i in triples:
            tic.mySums[count] = 0
            for j in i:
                tic.mySums[count] += tic.bState[j]

            count += 1
            
    def do_exit(tic):
        root.destroy()
    
# end of TicApp class

if __name__ == '__main__':
    root = TicApp()
    root.title("Tic Tac Toe")
    root.mainloop()
